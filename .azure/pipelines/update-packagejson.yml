trigger:
  branches:
    include:
      - main
  paths:
    include:
      - scripts/Update-PackageJson.ps1

schedules:
  - cron: "15 3 * * *"
    displayName: "Scheduled Trigger"
    branches:
      include:
        - main

jobs:
- job: update_json
  displayName: "Update package App.json"
  pool:
    vmImage: 'ubuntu-latest'

  steps:
  - checkout: self
    persistCredentials: true # Allow scripts to access the system token

  - task: PowerShell@2
    displayName: "Install PowerShell modules"
    inputs:
      targetType: 'inline'
      script: |
        Install-Module -Name Evergreen -Force -Scope CurrentUser
        Install-Module -Name PSAppDeployToolkit -RequiredVersion 4.0.6 -Force -Scope CurrentUser

  - task: PowerShell@2
    displayName: "List Modules"
    inputs:
      targetType: 'inline'
      script: |
        foreach ($module in @("Evergreen")) {
            $Version = (Get-Module -Name $module -ListAvailable | Select-Object -First 1).Version.ToString()
            Write-Host "$module version: $Version"
        }

  - task: PowerShell@2
    displayName: "Update package JSON"
    inputs:
      targetType: 'inline'
      script: |
        $params = @{
            Path            = "$(Build.SourcesDirectory)"
            PackageFolder   = @("Library")
            PackageManifest = "App.json"
            Verbose         = $false
        }
        . "$(Build.SourcesDirectory)/scripts/Update-PackageJson.ps1" @params

  - task: PowerShell@2
    displayName: "Get date"
    inputs:
      targetType: 'inline'
      script: |
        $date = Get-Date -Format "yyyy.MM.dd"
        Write-Host "##vso[task.setvariable variable=date]$date"

  - task: Bash@3
    displayName: "Import GPG key"
    inputs:
      targetType: 'inline'
      script: |
        echo "$(GPGKEY)" | gpg --import
        git config --global user.signingkey "$(gpg --list-keys --with-colons | grep pub | cut -d':' -f5)"
        git config --global commit.gpgsign true
        git config --global user.name "$(COMMIT_NAME)"
        git config --global user.email "$(COMMIT_EMAIL)"

  - task: Bash@3
    displayName: "Commit changes"
    inputs:
      targetType: 'inline'
      script: |
        git add .
        git commit -m "Update json $(date).$(Build.BuildId) update_json" || echo "No changes to commit."

  - task: Bash@3
    displayName: "Run if changes have been detected"
    condition: succeededOrFailed()
    inputs:
      targetType: 'inline'
      script: |
        if git diff --cached --quiet; then
          echo "No changes detected."
        else
          echo "Changes committed."
        fi
